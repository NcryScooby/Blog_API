// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  username       String    @unique
  name           String
  email          String    @unique
  password       String
  avatar         String
  posts          Post[]
  job            Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId          String    @map("job_id") @db.Uuid
  comments       Comment[]
  likes          Like[]
  role           Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId         String    @map("role_id") @db.Uuid
  countryOfBirth String    @map("country_of_birth")
  joinedAt       DateTime  @default(now()) @map("joined_at")
  bio            String

  @@map("users")
}

model Category {
  id    String @id @default(uuid()) @db.Uuid
  name  String
  posts Post[]

  @@map("categories")
}

model Post {
  id         String    @id @default(uuid()) @db.Uuid
  title      String
  content    String
  image      String
  views      Int       @default(0)
  tags       String[]  @default([])
  createdAt  DateTime  @default(now()) @map("created_at")
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String    @map("author_id") @db.Uuid
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String    @map("category_id") @db.Uuid
  comments   Comment[]
  likes      Like[]

  @@map("posts")
}

model Job {
  id   String @id @default(uuid()) @db.Uuid
  name String
  user User[]

  @@map("jobs")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @map("author_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @map("post_id") @db.Uuid

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @map("author_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @map("post_id") @db.Uuid

  @@map("likes")
}

enum RoleName {
  USER
  ADMIN

  @@map("role_names")
}

model Role {
  id    String   @id @default(uuid()) @db.Uuid
  name  RoleName @unique @default(USER)
  users User[]

  @@map("roles")
}
